;; Analyzed by ClojureScript 1.7.170
{:name sprague-grundy.core, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {mex {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/sprague-grundy/src/sprague_grundy/core.cljs", :line 5, :column 7, :end-line 5, :end-column 10, :arglists (quote ([p] [p n])), :doc "return the minimum excludant - the first number n in (range) such that (not (p n))\nusually, the predicate p determines whether n is a member of a set of integers.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p n]), :arglists ([p] [p n]), :arglists-meta (nil nil)}}, :name sprague-grundy.core/mex, :variadic false, :file "src/sprague_grundy/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p n]), :arglists ([p] [p n]), :arglists-meta (nil nil)}, :method-params ([p] [p n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p n]), :doc "return the minimum excludant - the first number n in (range) such that (not (p n))\nusually, the predicate p determines whether n is a member of a set of integers."}, next-states {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/sprague-grundy/src/sprague_grundy/core.cljs", :line 20, :column 7, :end-line 20, :end-column 18, :arglists (quote ([state])), :doc "return a list of possible next states"}, :name sprague-grundy.core/next-states, :variadic false, :file "src/sprague_grundy/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "return a list of possible next states"}, end-state? {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/sprague-grundy/src/sprague_grundy/core.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([state])), :doc "true if the game is finished"}, :name sprague-grundy.core/end-state?, :variadic false, :file "src/sprague_grundy/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "true if the game is finished"}, nimber {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/sprague-grundy/src/sprague_grundy/core.cljs", :line 30, :column 7, :end-line 30, :end-column 13, :arglists (quote ([possible-transitions state])), :doc "calculate the nimber of a game based on the possible game transitions (the rules)\nand the current state"}, :name sprague-grundy.core/nimber, :variadic false, :file "src/sprague_grundy/core.cljs", :end-column 13, :method-params ([possible-transitions state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([possible-transitions state])), :doc "calculate the nimber of a game based on the possible game transitions (the rules)\nand the current state"}}}