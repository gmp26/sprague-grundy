;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name gotit.rules, :imports nil, :requires nil, :uses nil, :defs {env {:name gotit.rules/env, :file "/Users/gmp26/clojure/sprague-grundy/src/gotit/rules.cljs", :line 11, :column 1, :end-line 11, :end-column 9, :meta {:file "/Users/gmp26/clojure/sprague-grundy/src/gotit/rules.cljs", :line 11, :column 6, :end-line 11, :end-column 9}}, rules {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/sprague-grundy/src/gotit/rules.cljs", :line 13, :column 7, :end-line 13, :end-column 12, :arglists (quote ([settings n])), :doc "The rules define the possible next states for the given settings - a derefed environment, and\n  the single state variable n."}, :name gotit.rules/rules, :variadic false, :file "/Users/gmp26/clojure/sprague-grundy/src/gotit/rules.cljs", :end-column 12, :method-params ([settings n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([settings n])), :doc "The rules define the possible next states for the given settings - a derefed environment, and\n  the single state variable n."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:limit :target}, :order [:target :limit]}, :doc nil}